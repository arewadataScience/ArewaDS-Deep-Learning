{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "03_pytorch_computer_vision_exercises.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "13e8e56312674d3386224a2f00fd866f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_0294fb9eb6fe4aff8d147f1f7cc1d553",
              "IPY_MODEL_abfa0e7b82bf486e92f9d90960284d3e",
              "IPY_MODEL_47b74eed37a84415a3fc42d1f19c5c4e"
            ],
            "layout": "IPY_MODEL_d7499f26238d4ec8a0d4ae459db82a5a"
          }
        },
        "0294fb9eb6fe4aff8d147f1f7cc1d553": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d3c8abcf41f4fee8069a63c0b7e603c",
            "placeholder": "​",
            "style": "IPY_MODEL_42ac5a11f588411dae6f326c558ff1fd",
            "value": "100%"
          }
        },
        "abfa0e7b82bf486e92f9d90960284d3e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e879e28f80d74fb4a91ba371ef73e0bc",
            "max": 5,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c7f9038bdc08459fa2638e92d9090832",
            "value": 5
          }
        },
        "47b74eed37a84415a3fc42d1f19c5c4e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_59125daa8589482a84193b4f52778612",
            "placeholder": "​",
            "style": "IPY_MODEL_47b099254fd7441cbcc3ab185374b22d",
            "value": " 5/5 [04:17&lt;00:00, 50.76s/it]"
          }
        },
        "d7499f26238d4ec8a0d4ae459db82a5a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9d3c8abcf41f4fee8069a63c0b7e603c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "42ac5a11f588411dae6f326c558ff1fd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e879e28f80d74fb4a91ba371ef73e0bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c7f9038bdc08459fa2638e92d9090832": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "59125daa8589482a84193b4f52778612": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "47b099254fd7441cbcc3ab185374b22d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "63e8ded88a124e61be96e5ecb60bfa8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bb7d551f066841259a0881d98d9f677d",
              "IPY_MODEL_74d4bcf2fd1f49efbf1b0393ab9bfb97",
              "IPY_MODEL_688974c6acb948d9a503736947cd9d7b"
            ],
            "layout": "IPY_MODEL_ace5b23c36684cc7b767948efa2e5738"
          }
        },
        "bb7d551f066841259a0881d98d9f677d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e0851980655a4669b356d632bf906959",
            "placeholder": "​",
            "style": "IPY_MODEL_2b88ffbcb8f54670b8da513dd1b99f02",
            "value": "100%"
          }
        },
        "74d4bcf2fd1f49efbf1b0393ab9bfb97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7b378dc2ab434c8a8b636e4b0f60431d",
            "max": 5,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_dc5d8f1541954a3b83695a4dd55c48eb",
            "value": 5
          }
        },
        "688974c6acb948d9a503736947cd9d7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_402e5c1c13bf4b34a73b9bd332edc798",
            "placeholder": "​",
            "style": "IPY_MODEL_660ab68ad7a64d38aec90fb79de21009",
            "value": " 5/5 [01:29&lt;00:00, 17.90s/it]"
          }
        },
        "ace5b23c36684cc7b767948efa2e5738": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e0851980655a4669b356d632bf906959": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b88ffbcb8f54670b8da513dd1b99f02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7b378dc2ab434c8a8b636e4b0f60431d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dc5d8f1541954a3b83695a4dd55c48eb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "402e5c1c13bf4b34a73b9bd332edc798": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "660ab68ad7a64d38aec90fb79de21009": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a2963dd0080b449d8f7f90573c4da188": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9db0a911e60c4271b78101ea50573155",
              "IPY_MODEL_cbdaec3285264cd2a71bab7d8a8216f9",
              "IPY_MODEL_0d573b771475435fa51639e5bfb8cb28"
            ],
            "layout": "IPY_MODEL_c08d9d15e6eb4e818aa97aa31c66ec95"
          }
        },
        "9db0a911e60c4271b78101ea50573155": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_08da86e0e8404cd1b02654bd24c62732",
            "placeholder": "​",
            "style": "IPY_MODEL_45397b429d5d47feab451defd8614c0d",
            "value": ""
          }
        },
        "cbdaec3285264cd2a71bab7d8a8216f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3beb124807bb4957940a8e9638f0fa5c",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c49009c851e94e55b2c1f3c4c901e205",
            "value": 1
          }
        },
        "0d573b771475435fa51639e5bfb8cb28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8ae0360136974b5ba1b7b607de3686c1",
            "placeholder": "​",
            "style": "IPY_MODEL_2e9c4f7159c545efb4f667c1be12a5b0",
            "value": " 313/? [00:03&lt;00:00, 137.66it/s]"
          }
        },
        "c08d9d15e6eb4e818aa97aa31c66ec95": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "08da86e0e8404cd1b02654bd24c62732": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "45397b429d5d47feab451defd8614c0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3beb124807bb4957940a8e9638f0fa5c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "c49009c851e94e55b2c1f3c4c901e205": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8ae0360136974b5ba1b7b607de3686c1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2e9c4f7159c545efb4f667c1be12a5b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d97f28b38c98433896ac99037182b3cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5171e7d0c89349d1942872a271d098d5",
              "IPY_MODEL_73a16e5349d341b5af0b013731ced828",
              "IPY_MODEL_7e44d7a46ba4402cb164b2433ffdd3bf"
            ],
            "layout": "IPY_MODEL_1b5f5ad03c8b4abbbcd9e9ff4c28b149"
          }
        },
        "5171e7d0c89349d1942872a271d098d5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_062c9c612da0434ba794c973c5857510",
            "placeholder": "​",
            "style": "IPY_MODEL_04ac343c4b8e419fab2787d7972b4da1",
            "value": "100%"
          }
        },
        "73a16e5349d341b5af0b013731ced828": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_458a4274c8b74a289184eedd1180e26c",
            "max": 5,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2b92883149594d35a1b72a9bbdd3e41a",
            "value": 5
          }
        },
        "7e44d7a46ba4402cb164b2433ffdd3bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9f9fb380066f4175aceea26385626884",
            "placeholder": "​",
            "style": "IPY_MODEL_1940c92f2cd1436cb186071674146a15",
            "value": " 5/5 [01:14&lt;00:00, 15.47s/it]"
          }
        },
        "1b5f5ad03c8b4abbbcd9e9ff4c28b149": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "062c9c612da0434ba794c973c5857510": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "04ac343c4b8e419fab2787d7972b4da1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "458a4274c8b74a289184eedd1180e26c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b92883149594d35a1b72a9bbdd3e41a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9f9fb380066f4175aceea26385626884": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1940c92f2cd1436cb186071674146a15": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4aa82d89f2074e89bb514adf1f407d60": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e8de50e36e644606b76bee73e655e11e",
              "IPY_MODEL_2491b725d5cf46b9ad30ba1b46c2c7a8",
              "IPY_MODEL_7063a77f761f4402a0dbd434f6475939"
            ],
            "layout": "IPY_MODEL_6aa262b1d0284761918302feaf86796c"
          }
        },
        "e8de50e36e644606b76bee73e655e11e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0d98b13403cf47858fc9be646fcb151d",
            "placeholder": "​",
            "style": "IPY_MODEL_c887d4b92fd14828ba47c71ee383932c",
            "value": "100%"
          }
        },
        "2491b725d5cf46b9ad30ba1b46c2c7a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_104ae0dd35bb440283deb4a98686e985",
            "max": 313,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1280745dd25547799bd36c359e1ab41b",
            "value": 313
          }
        },
        "7063a77f761f4402a0dbd434f6475939": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eb1b53c81546478985715a780717505b",
            "placeholder": "​",
            "style": "IPY_MODEL_5e1911efa81c48ed9c36093c74466df5",
            "value": " 313/313 [00:01&lt;00:00, 192.77it/s]"
          }
        },
        "6aa262b1d0284761918302feaf86796c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0d98b13403cf47858fc9be646fcb151d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c887d4b92fd14828ba47c71ee383932c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "104ae0dd35bb440283deb4a98686e985": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1280745dd25547799bd36c359e1ab41b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "eb1b53c81546478985715a780717505b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5e1911efa81c48ed9c36093c74466df5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/maryamalka85/ArewaDS-Deep-Learning/blob/main/Part_1_Deep_Learning_with_Pytorch/week4/week4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 03. PyTorch Computer Vision Exercises\n",
        "\n",
        "The following is a collection of exercises based on computer vision fundamentals in PyTorch.\n",
        "\n",
        "They're a bunch of fun.\n",
        "\n",
        "You're going to get to write plenty of code!\n",
        "\n",
        "## Resources\n",
        "\n",
        "1. These exercises are based on [notebook 03 of the Learn PyTorch for Deep Learning course](https://www.learnpytorch.io/03_pytorch_computer_vision/).\n",
        "2. See a live [walkthrough of the solutions (errors and all) on YouTube](https://youtu.be/_PibmqpEyhA).\n",
        "  * **Note:** Going through these exercises took me just over 3 hours of solid coding, so you should expect around the same.\n",
        "3. See [other solutions on the course GitHub](https://github.com/mrdbourke/pytorch-deep-learning/tree/main/extras/solutions)."
      ],
      "metadata": {
        "id": "Vex99np2wFVt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for GPU\n",
        "!nvidia-smi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GaeYzOTLwWh2",
        "outputId": "4e093661-df6c-4507-fe47-c979c6544f8d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Wed Apr 23 14:56:22 2025       \n",
            "+-----------------------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |\n",
            "|-----------------------------------------+------------------------+----------------------+\n",
            "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n",
            "|                                         |                        |               MIG M. |\n",
            "|=========================================+========================+======================|\n",
            "|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n",
            "| N/A   66C    P8             11W /   70W |       0MiB /  15360MiB |      0%      Default |\n",
            "|                                         |                        |                  N/A |\n",
            "+-----------------------------------------+------------------------+----------------------+\n",
            "                                                                                         \n",
            "+-----------------------------------------------------------------------------------------+\n",
            "| Processes:                                                                              |\n",
            "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n",
            "|        ID   ID                                                               Usage      |\n",
            "|=========================================================================================|\n",
            "|  No running processes found                                                             |\n",
            "+-----------------------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import torch\n",
        "import torch\n",
        "\n",
        "# Exercises require PyTorch > 1.10.0\n",
        "print(torch.__version__)\n",
        "\n",
        "# TODO: Setup device agnostic code\n",
        "device =\"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "device\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "DNwZLMbCzJLk",
        "outputId": "67260ac6-de01-4400-9a6e-3c752e1e325d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.6.0+cu124\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cuda'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. What are 3 areas in industry where computer vision is currently being used?"
      ],
      "metadata": {
        "id": "FSFX7tc1w-en"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VyWRkvWGbCXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\t1.\tHealthcare: Used in medical imaging (e.g., MRI, X-rays) to assist in diagnosis.\n",
        "\t2.\tAutonomous Vehicles: Helps self-driving cars detect objects, lanes, and obstacles.\n",
        "\t3.\tRetail: Facial recognition and automated checkout systems improve customer experience.\n"
      ],
      "metadata": {
        "id": "ZOnG1GHLZKMc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Search \"what is overfitting in machine learning\" and write down a sentence about what you find."
      ],
      "metadata": {
        "id": "oBK-WI6YxDYa"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "d1rxD6GObCqh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Overfitting occurs when a model learns patterns specific to the training data, including noise, making it perform well on training data but poorly on unseen test data.\n"
      ],
      "metadata": {
        "id": "xOtfv8elZwOI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Search \"ways to prevent overfitting in machine learning\", write down 3 of the things you find and a sentence about each.\n",
        "> **Note:** there are lots of these, so don't worry too much about all of them, just pick 3 and start with those."
      ],
      "metadata": {
        "id": "XeYFEqw8xK26"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Data Augmentation: Modifies training images (rotation, flipping) to improve generalization.\n",
        "2. Regularization (L1/L2): Adds a penalty to large weights, making the model simpler.\n",
        "3. Randomly turns off neurons during training to prevent dependency on specific features.\n"
      ],
      "metadata": {
        "id": "LswlbpepaAIG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Spend 20-minutes reading and clicking through the [CNN Explainer website](https://poloclub.github.io/cnn-explainer/).\n",
        "\n",
        "* Upload your own example image using the \"upload\" button on the website and see what happens in each layer of a CNN as your image passes through it."
      ],
      "metadata": {
        "id": "DKdEEFEqxM-8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Load the [`torchvision.datasets.MNIST()`](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST) train and test datasets."
      ],
      "metadata": {
        "id": "lvf-3pODxXYI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torchvision\n",
        "from torchvision import datasets, transforms\n",
        "\n",
        "# Define transform\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.1307,), (0.3081,))\n",
        "])\n",
        "\n",
        "# Load train and test datasets\n",
        "train_data = datasets.MNIST(root=\"./data\", train=True, download=True, transform=transform)\n",
        "test_data = datasets.MNIST(root=\"./data\", train=False, download=True, transform=transform)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "SHjeuN81bHza"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data, test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_uWK0KpFFep",
        "outputId": "c95ddb37-938f-40a6-aa15-7df93bbe507b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Dataset MNIST\n",
              "     Number of datapoints: 60000\n",
              "     Root location: ./data\n",
              "     Split: Train\n",
              "     StandardTransform\n",
              " Transform: Compose(\n",
              "                ToTensor()\n",
              "                Normalize(mean=(0.1307,), std=(0.3081,))\n",
              "            ),\n",
              " Dataset MNIST\n",
              "     Number of datapoints: 10000\n",
              "     Root location: ./data\n",
              "     Split: Test\n",
              "     StandardTransform\n",
              " Transform: Compose(\n",
              "                ToTensor()\n",
              "                Normalize(mean=(0.1307,), std=(0.3081,))\n",
              "            ))"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_data), len(test_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePSUg0oGEoHF",
        "outputId": "94822cc0-d4b5-40cc-c8f1-ccafe5d23683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 10000)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the class names from the dataset\n",
        "class_names = train_data.classes\n",
        "class_names\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TN6d1nUxD_64",
        "outputId": "ab8316b4-6e6a-4d61-c608-490a83a9e68e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['0 - zero',\n",
              " '1 - one',\n",
              " '2 - two',\n",
              " '3 - three',\n",
              " '4 - four',\n",
              " '5 - five',\n",
              " '6 - six',\n",
              " '7 - seven',\n",
              " '8 - eight',\n",
              " '9 - nine']"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Visualize at least 5 different samples of the MNIST training dataset."
      ],
      "metadata": {
        "id": "qxZW-uAbxe_F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to visualize images\n",
        "def show_images(dataset, num_images=5):\n",
        "    fig, axes = plt.subplots(1, num_images, figsize=(10, 2))\n",
        "    for i in range(num_images):\n",
        "        img, label = dataset[i]\n",
        "        axes[i].imshow(img.squeeze(), cmap=\"gray\")\n",
        "        axes[i].set_title(f\"Label: {label}\")\n",
        "        axes[i].axis(\"off\")\n",
        "\n",
        "show_images(train_data)\n"
      ],
      "metadata": {
        "id": "QVFsYi1PbItE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 155
        },
        "outputId": "ac991564-8773-4a32-b49f-273fd1284fea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x200 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Turn the MNIST train and test datasets into dataloaders using `torch.utils.data.DataLoader`, set the `batch_size=32`."
      ],
      "metadata": {
        "id": "JAPDzW0wxhi3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "# Define batch size\n",
        "batch_size = 32\n",
        "\n",
        "# Create DataLoaders\n",
        "train_dataloader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n",
        "test_dataloader = DataLoader(test_data, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "# Print batch details\n",
        "for images, labels in train_dataloader:\n",
        "    print(f\"Batch size: {images.shape}, Labels: {labels.shape}\")\n",
        "    break  # Print one batch\n"
      ],
      "metadata": {
        "id": "ALA6MPcFbJXQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95559a37-fe65-4188-a636-bcca4287d28e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Batch size: torch.Size([32, 1, 28, 28]), Labels: torch.Size([32])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_dataloader, test_dataloader"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XHFFOphgfGZW",
        "outputId": "a0dfbce4-ce4c-49c0-fe69-96cf6a4d4b36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<torch.utils.data.dataloader.DataLoader at 0x7bc1f4bd9910>,\n",
              " <torch.utils.data.dataloader.DataLoader at 0x7bc1f4bda050>)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_dataloader), len(test_dataloader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j8dnGKN9fqls",
        "outputId": "82b4c2d4-f837-4295-8dcd-f4f796e807ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1875, 313)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Recreate `model_2` used in notebook 03 (the same model from the [CNN Explainer website](https://poloclub.github.io/cnn-explainer/), also known as TinyVGG) capable of fitting on the MNIST dataset."
      ],
      "metadata": {
        "id": "bCCVfXk5xjYS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from torch import nn\n",
        "class MNIST_model(torch.nn.Module):\n",
        "  \"\"\"Model capable of predicting on MNIST dataset.\n",
        "  \"\"\"\n",
        "  def __init__(self, input_shape: int, hidden_units: int, output_shape: int):\n",
        "    super().__init__()\n",
        "    self.conv_block_1 = nn.Sequential(\n",
        "      nn.Conv2d(in_channels=input_shape,\n",
        "                out_channels=hidden_units,\n",
        "                kernel_size=3,\n",
        "                stride=1,\n",
        "                padding=1),\n",
        "      nn.ReLU(),\n",
        "      nn.Conv2d(in_channels=hidden_units,\n",
        "                out_channels=hidden_units,\n",
        "                kernel_size=3,\n",
        "                stride=1,\n",
        "                padding=1),\n",
        "      nn.ReLU(),\n",
        "      nn.MaxPool2d(kernel_size=2)\n",
        "    )\n",
        "    self.conv_block_2 = nn.Sequential(\n",
        "      nn.Conv2d(in_channels=hidden_units,\n",
        "                out_channels=hidden_units,\n",
        "                kernel_size=3,\n",
        "                stride=1,\n",
        "                padding=1),\n",
        "      nn.ReLU(),\n",
        "      nn.Conv2d(in_channels=hidden_units,\n",
        "                out_channels=hidden_units,\n",
        "                kernel_size=3,\n",
        "                stride=1,\n",
        "                padding=1),\n",
        "           nn.ReLU(),\n",
        "      nn.MaxPool2d(kernel_size=2)\n",
        "    )\n",
        "    self.classifier = nn.Sequential(\n",
        "      nn.Flatten(),\n",
        "      nn.Linear(in_features=hidden_units*7*7,\n",
        "                out_features=output_shape)\n",
        "    )\n",
        "\n",
        "  def forward(self, x):\n",
        "    x = self.conv_block_1(x)\n",
        "    # print(f\"Output shape of conv block 1: {x.shape}\")\n",
        "    x = self.conv_block_2(x)\n",
        "    # print(f\"Output shape of conv block 2: {x.shape}\")\n",
        "    x = self.classifier(x)\n",
        "    # print(f\"Output shape of classifier: {x.shape}\")\n",
        "    return x"
      ],
      "metadata": {
        "id": "5IKNF22XbKYS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "vEOGcDMleA2p",
        "outputId": "0fccc8ce-fb26-47e0-e857-325a2a4ec817"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cuda'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zFhrF_r2eB8E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "G2cEdnITd68u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = MNIST_model(input_shape=1,\n",
        "                    hidden_units=10,\n",
        "                    output_shape=10).to(device)\n",
        "model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uNDTL66DeDHD",
        "outputId": "aa9720f2-ce7e-4758-a857-95c7ee868e6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MNIST_model(\n",
              "  (conv_block_1): Sequential(\n",
              "    (0): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (conv_block_2): Sequential(\n",
              "    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (classifier): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): Linear(in_features=490, out_features=10, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Try a dummy forward pass to see what shapes our data is\n",
        "dummy_x = torch.rand(size=(1, 28, 28)).unsqueeze(dim=0).to(device)\n",
        "# dummy_x.shape\n",
        "model(dummy_x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K4q5XDGGeQQk",
        "outputId": "fba05e28-fcae-445d-9744-b564058f7a58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[-0.0237,  0.0819,  0.0189,  0.0228, -0.0252,  0.0080, -0.0020, -0.0176,\n",
              "          0.0736,  0.0680]], device='cuda:0', grad_fn=<AddmmBackward0>)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dummy_x_2 = torch.rand(size=([1, 10, 7, 7]))\n",
        "dummy_x_2.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lt9JtODAeXNE",
        "outputId": "bbea492f-6ad4-49b9-8638-ccfc885dc3fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 10, 7, 7])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flatten_layer = nn.Flatten()\n",
        "flatten_layer(dummy_x_2).shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A9OT0ZW-eZ13",
        "outputId": "32667c27-984c-4ce9-f951-4df41f3729c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 490])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9. Train the model you built in exercise 8. for 5 epochs on CPU and GPU and see how long it takes on each."
      ],
      "metadata": {
        "id": "sf_3zUr7xlhy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "# Train on CPU\n",
        "model_cpu = MNIST_model(input_shape=1,\n",
        "                        hidden_units=10,\n",
        "                        output_shape=10).to(\"cpu\")\n",
        "\n",
        "# Create a loss function and optimizer\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(model_cpu.parameters(), lr=0.1)\n",
        "\n",
        "### Training loop\n",
        "epochs = 5\n",
        "for epoch in tqdm(range(epochs)):\n",
        "  train_loss = 0\n",
        "  for batch, (X, y) in enumerate(train_dataloader):\n",
        "    model_cpu.train()\n",
        "\n",
        "    # Put data on CPU\n",
        "    X, y = X.to(\"cpu\"), y.to(\"cpu\")\n",
        "\n",
        "    # Forward pass\n",
        "    y_pred = model_cpu(X)\n",
        "\n",
        "    # Loss calculation\n",
        "    loss = loss_fn(y_pred, y)\n",
        "    train_loss += loss\n",
        "    # Optimizer zero grad\n",
        "    optimizer.zero_grad()\n",
        "\n",
        "    # Loss backward\n",
        "    loss.backward()\n",
        "\n",
        "    # Step the optimizer\n",
        "    optimizer.step()\n",
        "\n",
        "  # Adjust train loss for number of batches\n",
        "  train_loss /= len(train_dataloader)\n",
        "\n",
        "  ### Testing loop\n",
        "  test_loss_total = 0\n",
        "\n",
        "  # Put model in eval mode\n",
        "  model_cpu.eval()\n",
        "\n",
        "  # Turn on inference mode\n",
        "  with torch.inference_mode():\n",
        "    for batch, (X_test, y_test) in enumerate(test_dataloader):\n",
        "      # Make sure test data on CPU\n",
        "      X_test, y_test = X_test.to(\"cpu\"), y_test.to(\"cpu\")\n",
        "      test_pred = model_cpu(X_test)\n",
        "      test_loss = loss_fn(test_pred, y_test)\n",
        "\n",
        "      test_loss_total += test_loss\n",
        "\n",
        "    test_loss_total /= len(test_dataloader)\n",
        "\n",
        "  # Print out what's happening\n",
        "  print(f\"Epoch: {epoch} | Loss: {train_loss:.3f} | Test loss: {test_loss_total:.3f}\")"
      ],
      "metadata": {
        "id": "jSo6vVWFbNLD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170,
          "referenced_widgets": [
            "13e8e56312674d3386224a2f00fd866f",
            "0294fb9eb6fe4aff8d147f1f7cc1d553",
            "abfa0e7b82bf486e92f9d90960284d3e",
            "47b74eed37a84415a3fc42d1f19c5c4e",
            "d7499f26238d4ec8a0d4ae459db82a5a",
            "9d3c8abcf41f4fee8069a63c0b7e603c",
            "42ac5a11f588411dae6f326c558ff1fd",
            "e879e28f80d74fb4a91ba371ef73e0bc",
            "c7f9038bdc08459fa2638e92d9090832",
            "59125daa8589482a84193b4f52778612",
            "47b099254fd7441cbcc3ab185374b22d"
          ]
        },
        "outputId": "d75a4a87-a629-4fd4-a671-180d8e20e320"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/5 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "13e8e56312674d3386224a2f00fd866f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 | Loss: 0.227 | Test loss: 0.074\n",
            "Epoch: 1 | Loss: 0.067 | Test loss: 0.040\n",
            "Epoch: 2 | Loss: 0.050 | Test loss: 0.054\n",
            "Epoch: 3 | Loss: 0.045 | Test loss: 0.035\n",
            "Epoch: 4 | Loss: 0.039 | Test loss: 0.052\n",
            "CPU times: user 4min 15s, sys: 634 ms, total: 4min 16s\n",
            "Wall time: 4min 17s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "\n",
        "# Train on GPU\n",
        "model_gpu = MNIST_model(input_shape=1,\n",
        "                        hidden_units=10,\n",
        "                        output_shape=10).to(device)\n",
        "\n",
        "# Create a loss function and optimizer\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(model_gpu.parameters(), lr=0.1)\n",
        "\n",
        "# Training loop\n",
        "epochs = 5\n",
        "for epoch in tqdm(range(epochs)):\n",
        "  train_loss = 0\n",
        "  model_gpu.train()\n",
        "  for batch, (X, y) in enumerate(train_dataloader):\n",
        "    # Put data on target device\n",
        "    X, y = X.to(device), y.to(device)\n",
        "\n",
        "    # Forward pass\n",
        "    y_pred = model_gpu(X)\n",
        "\n",
        "    # Loss calculation\n",
        "    loss = loss_fn(y_pred, y)\n",
        "    train_loss += loss\n",
        "\n",
        "    # Optimizer zero grad\n",
        "    optimizer.zero_grad()\n",
        "      # Loss backward\n",
        "    loss.backward()\n",
        "\n",
        "    # Step the optimizer\n",
        "    optimizer.step()\n",
        "\n",
        "  # Adjust train loss to number of batches\n",
        "  train_loss /= len(train_dataloader)\n",
        "\n",
        "  ### Testing loop\n",
        "  test_loss_total = 0\n",
        "  # Put model in eval mode and turn on inference mode\n",
        "  model_gpu.eval()\n",
        "  with torch.inference_mode():\n",
        "    for batch, (X_test, y_test) in enumerate(test_dataloader):\n",
        "      # Make sure test data on target device\n",
        "      X_test, y_test = X_test.to(device), y_test.to(device)\n",
        "\n",
        "      test_pred = model_gpu(X_test)\n",
        "      test_loss = loss_fn(test_pred, y_test)\n",
        "\n",
        "      test_loss_total += test_loss\n",
        "\n",
        "    # Adjust test loss total for number of batches\n",
        "    test_loss_total /= len(test_dataloader)\n",
        "\n",
        "  # Print out what's happening\n",
        "  print(f\"Epoch: {epoch} | Loss: {train_loss:.3f} | Test loss: {test_loss_total:.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170,
          "referenced_widgets": [
            "63e8ded88a124e61be96e5ecb60bfa8f",
            "bb7d551f066841259a0881d98d9f677d",
            "74d4bcf2fd1f49efbf1b0393ab9bfb97",
            "688974c6acb948d9a503736947cd9d7b",
            "ace5b23c36684cc7b767948efa2e5738",
            "e0851980655a4669b356d632bf906959",
            "2b88ffbcb8f54670b8da513dd1b99f02",
            "7b378dc2ab434c8a8b636e4b0f60431d",
            "dc5d8f1541954a3b83695a4dd55c48eb",
            "402e5c1c13bf4b34a73b9bd332edc798",
            "660ab68ad7a64d38aec90fb79de21009"
          ]
        },
        "id": "dj3mE1kgb8b8",
        "outputId": "9d352c70-d8c0-4508-81d3-253d0e2766ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/5 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "63e8ded88a124e61be96e5ecb60bfa8f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 | Loss: 0.274 | Test loss: 0.103\n",
            "Epoch: 1 | Loss: 0.076 | Test loss: 0.059\n",
            "Epoch: 2 | Loss: 0.061 | Test loss: 0.051\n",
            "Epoch: 3 | Loss: 0.052 | Test loss: 0.045\n",
            "Epoch: 4 | Loss: 0.047 | Test loss: 0.044\n",
            "CPU times: user 1min 28s, sys: 608 ms, total: 1min 28s\n",
            "Wall time: 1min 29s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 10. Make predictions using your trained model and visualize at least 5 of them comparing the prediciton to the target label."
      ],
      "metadata": {
        "id": "w1CsHhPpxp1w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions with the trained model\n",
        "plt.imshow(test_data[0][0].squeeze(), cmap=\"gray\")"
      ],
      "metadata": {
        "id": "_YGgZvSobNxu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "3ce90fb5-cecf-40d1-8b3c-9666985bb157"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7bc1f4b58450>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Logits -> Prediction probabilities -> Prediction labels\n",
        "model_pred_logits = model_gpu(test_data[0][0].unsqueeze(dim=0).to(device)) # make sure image is right shape + on right device\n",
        "model_pred_probs = torch.softmax(model_pred_logits, dim=1)\n",
        "model_pred_label = torch.argmax(model_pred_probs, dim=1)\n",
        "model_pred_label\n",
        "num_to_plot = 5\n",
        "for i in range(num_to_plot):\n",
        "  # Get image and labels from the test data\n",
        "  img = test_data[i][0]\n",
        "  label = test_data[i][1]\n",
        "\n",
        "  # Make prediction on image\n",
        "  model_pred_logits = model_gpu(img.unsqueeze(dim=0).to(device))\n",
        "  model_pred_probs = torch.softmax(model_pred_logits, dim=1)\n",
        "  model_pred_label = torch.argmax(model_pred_probs, dim=1)\n",
        "\n",
        "  # Plot the image and prediction\n",
        "  plt.figure()\n",
        "  plt.imshow(img.squeeze(), cmap=\"gray\")\n",
        "  plt.title(f\"Truth: {label} | Pred: {model_pred_label.cpu().item()}\")\n",
        "  plt.axis(False);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8qlR_6njh0Kp",
        "outputId": "a4e56a0e-25e8-47b7-ea34-9e59abcc9441"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAEGBJREFUeJzt3WmMXfMbwPHnmqlqCYrap6YtmiK1L8HUFKX2hNolrWi11ggq1AuViJ1IvbDEluqMpbaUSKuxjaUSROxKp2oXaxutlC73/0I8Mf+pmnNnptPl80m8cHuee35Tyf36nXt6WiqXy+UAgIhYp6sXAMCqQxQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRToMrW1tXH00Ud39TJaKZVK8cADD3T1Mv7T3LlzV5u1svoQhbVUqVRq0z8vvfRSu87z0UcfxYQJE2Lu3Lkdsu7/MmHChBX+PK+99lqHnWvkyJEt3nvDDTeMXXfdNW655Zb4448/Ouw8naW+vv5ff5+6devW1cuji1R39QLoGg8++GCLf580aVLMmDGj1esDBw5s13k++uijuPrqq6O+vj5qa2vb9V5tcfzxx8f222/f6vXx48fHggULYu+99+7Q83Xv3j3uueeeiIiYN29ePP7443HppZfGm2++GQ8//HCHnqujXXnllTFq1KgWry1cuDDGjh0bhx12WBetiq4mCmupM844o8W/v/HGGzFjxoxWr/+/33//PXr27NmZS2uXQYMGxaBBg1q89tVXX8XXX38do0aNinXXXbdDz1ddXd3i9+zcc8+NfffdNx555JG49dZbY+utt241Uy6XY9GiRdGjR48OXUtRQ4cObfXa5MmTIyLi9NNPX9nLYRXh8hH/qr6+PnbZZZd4++23Y/DgwdGzZ88YP358RPx1+WnChAmtZmpra2PkyJEREfHAAw/EiSeeGBERQ4YM+ddLUq+++mrss88+sd5660W/fv1i0qRJrd63ubk5mpubK/o5HnrooSiXyyvlg26dddaJ+vr6iIi8ZPb3dyfTp0+PvfbaK3r06BF33XVXRPy1u7jooouipqYmunfvHttvv33ccMMNsWzZshbvO2/evBg5cmRstNFGsfHGG8eIESNi3rx5rc6/ePHi+OSTT+K7776raP2NjY2x/vrrx3HHHVfRPKs/OwVW6Oeff44jjjgiTjnllDjjjDNiiy22aPPs4MGD48ILL4yJEyfG+PHj81LUPy9JzZ49O4YPHx5nnXVWjBgxIu67774YOXJk7LnnnrHzzjvncYccckhEREXfTTQ0NERNTU0MHjy48Gwl/o7Xpptumq/NmjUrTj311BgzZkyMHj06BgwYEL///nscdNBB8c0338SYMWOiT58+8frrr8cVV1wR3333Xdx2220R8dfO4rjjjotXX301xo4dGwMHDownn3wyRowY0erc33zzTQwcODBGjBhR+AvoH3/8MWbMmBEnn3xyrL/++hX//KzeRIEV+v777+POO++MMWPGFJ7t169f1NXVxcSJE2Po0KH5f9D/NGvWrGhqaoq6urqIiDjppJOipqYm7r///rj55pvbu/z48MMP47333ovLLrssSqVSu99veX766aeIiJg/f348+uij8dRTT8WgQYNiwIABeczs2bNj2rRpcfjhh+dr11xzTTQ3N8c777wTO+ywQ0REjBkzJrbeeuu46aab4pJLLomampqYOnVqNDU1xY033hjjxo2LiIhzzjknhgwZ0qE/xyOPPBJLlixx6WgtJwqsUPfu3ePMM8/stPffaaedMggREb17944BAwbEnDlzWhxX6d1LDQ0NEdF518gXLlwYvXv3bvHa/vvv3+oL+759+7YIQkTElClToq6uLnr16pVhiYg49NBD4/rrr4+mpqY4/fTT49lnn43q6uo455xz8piqqqq44IIL4pVXXmnxnrW1tVHp35vV2NgYvXv3Xu53Daw9RIEV2mabbTr8y9l/6tOnT6vXevXqFb/++mu737tcLkdjY2Pssssurb587ijrrbdePP300xHxV0D79u0b2267bavj+vbt2+q1zz77LN57771WUfnbDz/8EBERX3zxRWy11VaxwQYbtPj1f+5E2mvOnDkxc+bMOP/886O62sfC2sx/fVao6B0yS5cuLXR8VVXVcl/viL8l9rXXXosvvvgirrvuuna/17+pqqqKQw899D+PW97v47Jly2Lo0KFx2WWXLXdmxx13bPf62qqxsTEi3HWEKFChXr16tbr75c8//2x110tnXcdvi4aGhiiVSnHaaad12RpWpH///rFgwYL/jMp2220Xzz//fCxYsKDFbmHWrFkdtpbGxsbo379/7Lfffh32nqye3JJKRfr37x9NTU0tXrv77rtb7RT+votlebdPFlH0ltTFixfHlClT4sADD1zuJapVwUknnRQzZ86M6dOnt/q1efPmxZIlSyIi4sgjj4wlS5bEHXfckb++dOnSuP3221vNVXJL6jvvvBMff/zxKhtPVi47BSoyatSoGDt2bJxwwgkxdOjQePfdd2P69Omx2WabtThut912i6qqqrjhhhti/vz50b179zj44INj8803L3S+orekTp8+PX7++edV+nLIuHHjYurUqXH00UfnbbgLFy6M999/Px577LGYO3dubLbZZnHMMcfEAQccEJdffnnMnTs3dtppp3jiiSdi/vz5rd6zkltSO/vLeFYvokBFRo8eHZ9//nnce++9MW3atKirq4sZM2bkh/ffttxyy7jzzjvjuuuui7POOiuWLl0aL774YuEoFNXQ0BDdunXLPzy3KurZs2e8/PLLce2118aUKVNi0qRJseGGG8aOO+4YV199dWy00UYR8dcfiJs6dWpcdNFFMXny5CiVSnHsscfGLbfcErvvvnu71rBs2bJ4+OGHY4899ujQL65ZfZXKHfGNHqxBSqVS3H///fkns2Ft4jsFAJIoAJBEAYDki2b4P75mY21mpwBAEgUAUpsvH3Xl4woAaL+2XBq1UwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASNVdvYC1wfDhwwvPjB49uqJzffvtt4VnFi1aVHimoaGh8Mz3339feCYiYvbs2RXNAcXZKQCQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAKlULpfLbTqwVOrstayx5syZU3imtra24xfSxX777beK5j788MMOXgkd7euv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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAEWRJREFUeJzt3X+M13UdwPHXKQd5ambXRZQIgWlwZEypxRlIqDXGjyYqkFjatGJS9oOijbEdtTnn1tKxQvshFZ5tcFE3mU3yByrg0aJNaOlJXqjLQUTkBZRYd9/+8rWuO+I+X77H8ePx2PzDz31en8/7PnPfp5/v98uHqlKpVAoAiIjTBnoBABw/RAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRIEBMXLkyJgxY8ZAL6OHkSNHxrJlywZ6GX1SVVV1wqyVE4conIKqqqr69M8TTzxxVOd59tlnY9myZfHiiy9WZN1H0tbWFosXL47x48fH2WefHcOGDYvp06fH1q1bK36uZcuWdbtWNTU1MXbs2Fi6dGn8/e9/r/j5Ku03v/lNfP7zn4/6+vo488wz4/zzz485c+bEjh07BnppDLBBA70Ajr3777+/27+vWrUqHnnkkR7bx4wZc1TnefbZZ+Mb3/hGTJkyJUaOHHlUx+qLH/7wh3HffffFNddcE7feemt0dHTE9773vfjQhz4UDz/8cFx55ZUVP+c999wTZ511Vhw4cCB+9atfxe233x6PP/54bN68Oaqqqip+vkq58847Y/PmzXHdddfFxRdfHLt3747vfOc7cckll8SWLVti3LhxA71EBkqJU97ChQtLfflP4eDBg4WO29zcXIqI0oYNG3r8bMSIEaXp06cXOt6RbN26tbR///5u2/bu3Vuqq6srXXbZZX06xogRI0qNjY1H3K+xsbEUEaW//OUv3bbPnj27FBGlp59++rCzRa/j4UREn9bam82bN5cOHTrUbduOHTtKQ4YMKc2fP78Cq+NE5e0jejVlypQYN25c/Pa3v43JkydHTU1NLFmyJCIO/172yJEj46abboqIiB//+Mdx3XXXRUTERz7ykcO+JbVp06b44Ac/GG9605ti1KhRsWrVqh7HbW9vj/b29iOu+dJLL42zzjqr27ba2tqYNGlSPPfcc334rY/e1KlTIyJi586dEfH/r+OhQ4eisbExLrjgghgyZEgMHz48Fi9eHIcOHep2zEOHDsWXv/zlqKuri7PPPjtmzZoVf/rTn3o9f1tbW7z88stHXGdDQ0MMHjy427b3vOc9UV9ff8yuFccnbx9xWH/9619j2rRpMW/evLjhhhti6NChfZ6dPHly3HbbbbF8+fJYsmRJvhX1329JvfDCC3HttdfGzTffHDfeeGOsXLkybrrpprj00kujvr4+97viiisiIsr+bGL37t3xtre9razZot6IV21tbW7r7Tp2dXXFrFmzYtOmTfHZz342xowZE7/73e/irrvuih07dkRLS0vO33LLLdHU1BTXX399NDQ0xOOPPx7Tp0/v9fxjxoyJyy+/vKzPg0qlUvz5z3/udu059YgCh7V79+64995743Of+1zh2VGjRsWkSZNi+fLlcdVVV8WUKVN67PP888/HU089FZMmTYqIiDlz5sTw4cPjRz/6UXzrW9862uVHRMTGjRujtbU1li5dWpHj/a99+/ZFRORnCitWrIihQ4fm7xTR+3VsamqKRx99NJ588sn48Ic/nNvHjRsXCxYsiKeffjoaGhpi27Zt0dTUFLfeemt897vfjYiIhQsXxvz582P79u0V/V0eeOCBeOWVV+Kb3/xmRY/LiUUUOKwhQ4bEpz/96X47/tixY7u9eNbV1cVFF10Uf/zjH7vtV+4dwp49e+L666+Pd7/73bF48eKjWephXXTRRd3+vb6+Pn7yk59ETU1NbuvtOjY3N8eYMWPive99b+zduze3v/H204YNG6KhoSF++ctfRkTEbbfd1m3+S1/6Uvz0pz/tsZ5SmX9nVltbWyxcuDAmTpwYN954Y1nH4OQgChzWu971rh7vO1fS+eef32PbueeeG3/729+O+tgHDx6MGTNmxP79+2PTpk09PmuolLVr18ab3/zmqK6ujvPOOy9Gjx7dY5/eruMf/vCHeO6556Kurq7X4+7ZsyciIl566aU47bTTehz3f2N0NHbv3h3Tp0+Pc845J372s5/F6aefXrFjc+IRBQ7rjDPOKLR/Z2dnof0P9+JT7v/tvuH111+P2bNnx/bt22P9+vX9+vXKyZMnH/Hzit6uY1dXV7zvfe+Lb3/7273ODB8+vCLrO5KOjo6YNm1avPrqq7Fx48Z45zvfeUzOy/FLFCjs3HPPjVdffbXbttdffz127drVbdtAfE+/q6srPvWpT8Vjjz0Wa9asicsvv/yYr6EvRo8eHdu2bYsrrrji/16nESNGRFdXV7S3t3e7O3j++eePeg2vvfZazJw5M3bs2BGPPvpojB079qiPyYnPV1IpbPTo0fHUU0912/b973+/x53CmWeeGRHRIyBF9fUrqRERX/jCF2L16tWxYsWKmD179lGdtz/NmTMnXnnllfjBD37Q42f//Oc/4+DBgxERMW3atIiIWL58ebd97r777l6P29evpHZ2dsbcuXOjtbU1mpubY+LEiQV/A05W7hQo7JZbbokFCxbENddcE1dddVVs27Yt1q9f3+NtlPHjx8fpp58ed955Z3R0dMSQIUNi6tSp8fa3v73Q+fr6ldS77747VqxYERMnToyamppoamrq9vOrr746QzXQPvnJT8aaNWtiwYIFsWHDhrjsssuis7Mz2traYs2aNbF+/fqYMGFCjB8/Pj7xiU/EihUroqOjIxoaGuKxxx6LF154odfj9vUrqYsWLYoHH3wwZs6cGfv27etxrW644YZK/aqcYESBwj7zmc/Ezp0747777ouHH344Jk2aFI888ki+eL/hHe94R9x7771xxx13xM033xydnZ2xYcOGwlHoq2eeeSYiIlpbW6O1tbXHz3fu3HncROG0006LlpaWuOuuu2LVqlXxi1/8ImpqamLUqFHxxS9+MS688MLcd+XKlVFXVxcPPPBAtLS0xNSpU+Ohhx46qs8d3rhW69ati3Xr1vX4uSicuqpKR/upHpxE3vhT2Z4+yqnKZwoAJFEAIIkCAMlnCgAkdwoAJFEAIPX5zykcz3+1IABH1pdPC9wpAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBo00AvgxPTVr3618MwZZ5xR1rkuvvjiwjPXXnttWecq6p577ik809raWta57r///rLmoAh3CgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASFWlUqnUpx2rqvp7LQyQ1atXF545Vg+cOxm1t7eXNXfllVcWnnn55ZfLOhcnp7683LtTACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAGjTQC6CyTsaH27W1tRWeWb9+feGZUaNGFZ6ZOXNm4ZnRo0cXnomImD9/fuGZO+64o6xzcepypwBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgOSBeMepCRMmlDV39dVXV3glvfv9739feGbWrFllnWvv3r2FZw4cOFB4ZvDgwYVntmzZUnjm/e9/f+GZiIja2tqy5qAIdwoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEgeiHecGjZsWFlzVVVVhWfKebjdxz72scIzu3btKjxzLC1atKjwzNixY/thJb176KGHjtm5OHW5UwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJKnpB6n1q1bV9bcBRdcUHhm//79hWf27dtXeOZ4N2/evMIz1dXV/bASGDjuFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkDwQ7yTz0ksvDfQSjgtf+9rXCs9ceOGF/bCSnn79618f0zkowp0CAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQBSValUKvVpx6qq/l4L9GrGjBmFZ5qbmwvPDB48uPDMnj17Cs/Mmzev8ExExJNPPlnWHLyhLy/37hQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJAGDfQC4EgmTJhQeKach9uVY/Xq1YVnPNiO45k7BQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIHlKKsdMS0tLWXMf/ehHK7uQw1i1alXhmaVLl/bDSmDguFMAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAECqKpVKpT7tWFXV32vhBDJs2LDCM9u2bSvrXLW1tYVn9u7dW3imoaGh8Ex7e3vhGRgofXm5d6cAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYA0aKAXwIlp7dq1hWfKebBduZqamgrPeLgduFMA4L+IAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBA8kA8YtasWYVnLrnkkn5YSe+eeOKJwjONjY2VXwicAtwpAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgeSDeSaa2trbwzJIlSwrPVFdXF54p1zPPPFN45sCBA5VfCJwC3CkAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgDJU1JPMosWLSo884EPfKAfVtJTS0tLWXONjY2VXQhwWO4UAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQqkqlUqlPO1ZV9fdaqIDXXnut8Ex1dXU/rKSn8847r6y5Xbt2VXglcGrqy8u9OwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKRBA70ATh1vfetby5r717/+VeGVDKyOjo6y5sq5DuU87PCcc84pPFOOt7zlLWXNfeUrX6nsQiqos7OzrLmvf/3rhWf+8Y9/lHWuI3GnAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGA5IF4HDPbt28f6CUcF5qbm8ua27VrV+GZoUOHFp6ZO3du4RmOzu7duwvP3H777f2wEncKAPwXUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASFWlUqnUpx2rqvp7LVTAz3/+88IzH//4x/thJZxK/v3vfxee6erq6oeV9O7BBx8sPLN169Z+WEnvNm7cWHhmy5YthWf68nLvTgGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiekkosXry48Ex1dXU/rKRy6uvrC8/MnTu3H1ZSOStXriw88+KLL1Z+Ib1Yu3Zt4Zm2trZ+WAn/j6ekAlCIKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJA/EAzhFeCAeAIWIAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACAN6uuOpVKpP9cBwHHAnQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIA6T+qfVziwpPzEQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAADnBJREFUeJzt3X2s1nX9x/H3BSp1vJvWkdMUOYOmHsWJU1shIKJumoytZc68WTQtWd7lP/3h3ESnczqnDm+n8w6oLUVgY5ZEeoJpc61W1GZootIsnVJoE4o2OL8/ytd+p3Oo8z1wboDHY/OPc3m9r8/nXH9cTz/XdZ2vrZ6enp4CgKoaM9IbAGD0EAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBUZEZ2dnzZkzZ6S30UdnZ2ctWLBgpLcxIK1Wa4/ZK3sOUdgHtVqtAf3zs5/9bJfWefXVV2vBggX19ttv75Z9D8Rtt91Wc+fOrfHjxw/pi+aCBQt6PVdtbW11/PHH14033lh/+9vfhmTN3enjjz+um266qc4999w6/PDDq9Vq1ZNPPjnS22IU2G+kN8DwW7x4ca+fFy1aVKtXr+5ze1dX1y6t8+qrr9bNN99cs2bNqs7Ozl16rIG68cYbq6Ojo04++eRatWrVkK/30EMP1UEHHVQff/xx/eQnP6nbbrutXnzxxXr55Zer1WoN+fqDtWnTprrlllvq6KOPrpNOOmmX/wOAvYco7IMuvfTSXj+/8sortXr16j63/6etW7dWW1vbUG5tl7311lvV2dlZmzZtqvb29iFf74ILLqjPfvazVVU1f/78+upXv1rLli2rV155pb70pS/1OzMansfPfe5z9e6771ZHR0f98pe/rNNOO21E98Po4e0j+jVr1qyaMmVK/epXv6qZM2dWW1tb3XDDDVW18/eyOzs7a968eVVV9eSTT9bXvva1qqo688wzd/qW1EsvvVRf+MIX6lOf+lRNmjSpFi1a1OdxN2zYUBs2bBjQvofrRLIzs2fPrqp/xanqvz+P27Ztq5tuuqk+//nP17hx42rChAn1ve99r7Zt29brMbdt21bXX399tbe318EHH1xz586td955p9/1169fX3/84x//5z7HjRtXHR0du/KrspdyUmCn/vKXv9R5551XF110UV166aU1fvz4Ac/OnDmzrr322lq4cGHdcMMNeSvq/78l9cYbb9QFF1xQl19+eX3jG9+oxx9/vObNm1ennHJKnXDCCbnfWWedVVU1rJ9NDNYn8frMZz6T2/p7Hnfs2FFz586tl156qb797W9XV1dX/e53v6t77rmnXn/99VqxYkXmr7jiilqyZEldfPHFNW3atHrxxRfr/PPP73f9rq6uOuOMM7wdxKCJAjv13nvv1cMPP1xXXnll49lJkybVjBkzauHChXXOOefUrFmz+tzntddeq7Vr19aMGTOqqurCCy+sCRMm1BNPPFF33XXXrm5/WPz1r3+tqspnCg8++GCNHz8+v1NV/8/jkiVL6qc//WmtWbOmpk+fntunTJlS8+fPr5///Oc1bdq0WrduXS1ZsqS+853v1AMPPFBVVVdddVVdcskl9dvf/naYfkv2JaLATo0bN66++c1vDtnjH3/88b1ePNvb2+vYY4+tN998s9f9RvMJ4dhjj+318wknnFBPPfVUr88M+nsen3nmmerq6qrjjjuuNm3alNs/efupu7u7pk2bVj/60Y+qquraa6/tNf/d7363fvCDH/TZj/9nFrtKFNipI488sg444IAhe/yjjz66z22HHXZYbd68ecjW3N2effbZOuSQQ2r//fevo446qiZPntznPv09j3/4wx/q97///U4/DH///ferqmrjxo01ZsyYPo/7nzGC3UUU2KlPf/rTje6/ffv2RvcfO3Zsv7fvSf+1O3PmzHz7aGf6ex537NhRJ554Yt199939zkyYMGG37A+aEgUaO+yww+rDDz/sdds///nPevfdd3vdNpq/pz/SJk+eXOvWrauzzjrrvz5PEydOrB07dtSGDRt6nQ5ee+214dgm+yBfSaWxyZMn19q1a3vd9sgjj/Q5KRx44IFVVX0C0lSTr6TuKS688ML605/+VI8++miff/f3v/+9tmzZUlVV5513XlVVLVy4sNd97r333n4fd6BfSYWdcVKgsSuuuCJ/qHXOOefUunXratWqVX3eRpk6dWqNHTu27rjjjvroo49q3LhxNXv27DriiCMardfkK6mLFy+ujRs31tatW6uqau3atXXrrbdWVdVll11WEydObLT2ULnsssvq6aefrvnz51d3d3edfvrptX379lq/fn09/fTTtWrVqjr11FNr6tSp9fWvf70efPDB+uijj2ratGn1wgsv1BtvvNHv4zb5Sur9999fH374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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAElpJREFUeJzt3X+slXUdwPHPuRcDoaksbgZCgKIkK7uWUNOBoLIivekKyR8VWAkSk1hFS9gabK4QohWlILNBQOsH6oQak1yjwI25IkYtiJIEh5GGCzZAC+49/eH4zNtF730e7i/w9dr8w+ecz3m+nF3P+z7nHL5WqtVqNQAgImq6egEAdB+iAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiQJcZMmRI3HTTTV29jBYqlUqsXLmyq5fRqr17954xa+XMIQpvUZVKpU3//OY3vzmt8+zcuTPmzZsXe/fubZd1t0VTU1MsXLgwhg4dGr169YorrrgifvKTn7T7eaZMmdLsuTrvvPPi/e9/fyxevDj+85//tPv5OsKhQ4di6tSpUVdXF3369Ilx48bFH/7wh65eFl2oR1cvgK6xevXqZv++atWqeOqpp1ocv/zyy0/rPDt37oz58+fH2LFjY8iQIaf1WG01d+7cWLBgQdx9990xcuTIWLduXdxxxx1RqVTitttua9dz9ezZMx555JGIeO0F9rHHHouvfvWr8bvf/S5++tOftuu52ltTU1PceOONsWPHjpg9e3b069cvHnrooRg7dmxs27YtLr300q5eIl2hCtVqdcaMGdW2/DgcPXq00OOuXbu2GhHVTZs2tbht8ODB1RtvvLHQ47Vm//791XPOOac6Y8aMPNbU1FQdPXp0deDAgdUTJ060+hgRUV2xYkWr95s8eXK1T58+zY41NjZWr7rqqmpEVF944YVTzjU1NVWPHTvW6uO35rnnnmvzWk/lZz/7WTUiqmvXrs1jL730UvWCCy6o3n777ae9Ps5M3j7iDY0dOzbe+973xrZt22LMmDHRu3fvmDNnTkS89vbTvHnzWswMGTIkpkyZEhERK1eujFtvvTUiIsaNG/eGb0k9/fTTMWrUqOjVq1dcfPHFsWrVqhaPu2fPntizZ0+ra163bl0cP348vvjFL+axSqUS06dPj/3798fWrVvb+Kcvp6amJsaOHRsRkW+ZnfzsZOPGjXHVVVfFueeeGw8//HBEvHZ1MWvWrBg0aFD07Nkzhg0bFg888EA0NTU1e9xDhw7FlClT4vzzz48LLrggJk+eHIcOHWpx/uPHj8df/vKXOHDgQKtrffTRR+PCCy+MT3ziE3msrq4uJk2aFOvWrTtj3gKjfYkCb+rll1+OCRMmRH19fXz3u9+NcePGtXl2zJgxMXPmzIiImDNnTqxevTpWr17d7C2pZ599NiZOnBjjx4+PxYsXR9++fWPKlCnx5z//udljXX/99XH99de3es7t27dHnz59WrztNWrUqLy9o52M1zve8Y48tnv37rj99ttj/Pjx8b3vfS/q6+vj2LFjce2118aaNWvis5/9bCxZsiSuueaauO++++LLX/5yzlar1bj55ptj9erV8elPfzruv//+2L9/f0yePLnFuV944YW4/PLL47777mt1ndu3b48PfOADUVPT/GVg1KhRcezYsfjrX/9a9ingDOYzBd7UP//5z1i2bFlMmzat8OzFF18co0ePjiVLlsT48ePzN+jX2717d2zevDlGjx4dERGTJk2KQYMGxYoVK+Lb3/524XMeOHAgLrzwwqhUKs2O9+/fPyIi/vGPfxR+zNYcPHgwIiIOHz4cP//5z+OJJ56IK664IoYPH573efbZZ+PJJ5+Mj3zkI3ns/vvvjz179sT27dvz/ftp06bFgAEDYtGiRfGVr3wlBg0aFOvXr4/NmzfHwoULY/bs2RERMX369EKBPpUDBw7EmDFjWhx//XP1vve977TOwZlHFHhTPXv2jLvuuqvDHn/EiBEZhIjX3r4YPnx4/P3vf292v7Z+e+mVV16Jnj17tjjeq1evvL09HT16NOrq6podu/rqq1t8YD906NBmQYiIWLt2bYwePTr69u2bYYmIuOGGG2LBggWxefPmuPPOO2PDhg3Ro0ePmD59et6ntrY27r333tiyZUuzxxwyZEhU2/j/zers54ozgyjwpi666KJ429ve1mGP/+53v7vFsb59+8a///3vUo937rnnnvK98FdffTVvb0+9evWKX/ziFxHxWkCHDh0aAwcObHG/oUOHtjj2t7/9Lf74xz+2iMpJL730UkRE7Nu3L/r37x9vf/vbm93++iuRMjr7ueLMIAq8qaIvDI2NjYXuX1tbe8rjbf1t9//1798/Nm3aFNVqtdlbSCc/eB0wYECpx30jtbW1ccMNN7R6v1M9j01NTTF+/Pj42te+dsqZyy677LTX92b69+9/yg+kO+q54swgCpTSt2/fFt9++e9//9viReb/39vvaPX19fHII4/Erl27YsSIEXn8mWeeydu7i0suuSSOHDnSalQGDx4cv/71r+PIkSPNrhZ27959Wuevr6+PLVu2RFNTU7MPm5955pno3bt3h0eJ7sm3jyjlkksuic2bNzc7tnz58hZXCn369ImIOOXXJ4to61dSb7755jjnnHPioYceymPVajWWLVsWF110UVx99dWntY72NGnSpNi6dWts3LixxW2HDh2KEydORETExz72sThx4kQsXbo0b29sbIzvf//7LeaKfCV14sSJ8eKLL8bjjz+exw4ePBhr166NhoaGU37ewNnPlQKlfOELX4h77rknPvnJT8b48eNjx44dsXHjxujXr1+z+9XX10dtbW088MADcfjw4ejZs2dcd9118c53vrPQ+U5+HbW1D5wHDhwYs2bNikWLFsXx48dj5MiR8cQTT8SWLVvixz/+8Ru+XdUVZs+eHevXr4+bbroppkyZEh/84Afj6NGj8ac//SkeffTR2Lt3b/Tr1y8aGhrimmuuia9//euxd+/eGDFiRDz++ONx+PDhFo958iupkydPbnVPpIkTJ8aHP/zhuOuuu2Lnzp35N5obGxtj/vz5HfSnprsTBUq5++6747nnnosf/vCH8eSTT8bo0aPjqaeeavF3Cd71rnfFsmXL4lvf+lZ8/vOfj8bGxti0aVPhKBSxYMGC6Nu3bzz88MOxcuXKuPTSS2PNmjVxxx13dNg5y+jdu3f89re/jW9+85uxdu3aWLVqVZx33nlx2WWXxfz58+P888+PiNf+Qtz69etj1qxZsWbNmqhUKvHxj388Fi9eHFdeeWXp89fW1saGDRti9uzZsWTJknjllVdi5MiRsXLlytP+EJszV6Va9hM9OEtVKpVYsWJF/s1seCvxmQIASRQASKIAQPJBM/wfH7PxVuZKAYAkCgCkNr991NnbFQDQvtry1qgrBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoApB5dvQBoTZ8+fQrPLFq0qPDMtGnTCs9s27at8Mytt95aeCYiYt++faXmoAhXCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASJVqtVpt0x0rlY5eC5zSsGHDCs/s2rWrA1bSUk1N8d+rZs6cWepcDz74YKk5OKktL/euFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkHp09QJ466irqys196Mf/aidVwK8EVcKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABINsSjlJkzZxaeueWWW0qda9SoUaXmuqsxY8aUmqupKf473I4dOwrPbN68ufAMZw9XCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQKpUq9Vqm+5YqXT0WjiDNDY2Fp5pamrqgJV0rTI7l3bm87Bv377CM5/61KcKz2zbtq3wDJ2vLS/3rhQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBsiEds2LCh8MyECRMKz5yNG+K9/PLLhWeOHDlS6lyDBw8uNdcZamtru3oJtIEN8QAoRBQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAFKPrl4A7evaa68tPDN8+PDCM2U2t+vuG+ItW7as8MyvfvWrwjOHDx8uPBMRcd111xWemTt3bqlzFTV9+vTCM0uXLu2AlXC6XCkAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACBVqtVqtU13rFQ6ei28zpAhQ0rNbd26tfBMv379Cs/U1BT/faLshnj79u0rPPPYY48Vnpk/f37hmWPHjhWeKWvw4MGFZ8r8PNTV1RWeefXVVwvPfOMb3yg8ExHxgx/8oPDM8ePHS53rbNOWl3tXCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQLJLajc1bNiwUnO7du1q55WcWpldUjdt2lTqXLfddlvhmYMHD5Y619nm3nvvLTzzne98p/BMZ+6a+573vKfwzJ49e0qd62xjl1QAChEFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYDUo6sXwJnp97//feGZz33uc6XOZXO78tavX1945s477yw8M3LkyMIzdE+uFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkGyId5apqemczn/oQx/qlPNweiqVSuGZMj9DnfVzFxExb968wjOf+cxn2n8hZylXCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASDbE66buueeeUnNNTU3tvBLOZA0NDYVnrrzyysIzZX7uyv6sltkQj7ZzpQBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgGRDvG6qzEZmnBnq6upKzY0YMaLwzJw5c0qdqzP861//KjV3/Pjxdl4Jr+dKAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASHZJhU42d+7cUnMzZsxo55W0n7179xaemTx5cqlzPf/886XmaBtXCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASDbEg9OwYcOGwjPDhw/vgJV0rZ07dxaeefrppztgJZwuVwoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEg2xOumKpVKqbmams7p/IQJEzrlPBERy5cvLzwzYMCADlhJS2We76ampg5YSddqaGjo6iXQTlwpAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAg2RCvm1q6dGmpuYULF7bzSk7tl7/8ZeGZztwIrjtvOted1xYRsWzZsq5eAl3IlQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAFKlWq1W23THSqWj18LrDB48uNTc1q1bC8/U1dUVnqmpKf77RHffCK6MMs/Diy++WOpcu3btKjwzderUwjMHDhwoPHPs2LHCM3S+trzcu1IAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSXVLPMmPGjCk8c8sttxSe+dKXvlR4xi6pr5k5c2apcz344IOl5uAku6QCUIgoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkG+JRykc/+tHCM1OnTi11roaGhsIz69evLzyzfPnywjNl/rvYuXNn4ZmIiOeff77UHJxkQzwAChEFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYBkQzyAtwgb4gFQiCgAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKQebb1jtVrtyHUA0A24UgAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAg/Q88A7AmfySdIgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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U6K3t/f/RuWEE06IBx98MHp7e/ucFrZs2VL12n/84x8jIuIDH/hAxa8988wz0dzcHEuXLo329vaq1+CVSRSoypQpU2LTpk19Hrv77rsrTgr7fnBsfx+fLGLfJ3qmTJnyss+ZMGFCfP/73694fNmyZfGzn/0sVq5cGRMnTjyofQykSy65JBYsWBDr1q2reL+hp6cnjjzyyKirq4tZs2bF3XffHXfccUe+0bx79+746le/WnHNXbt2RVdXV4wdO/aAX+vZZ5+93+/VlVdeGSeccELccsst8cY3vvEgv0JeiUSBqnz0ox+Nq6++OmbPnh2tra3x+OOPx7p162L8+PF9njd9+vQYMWJE3HbbbbF9+/aor6+Ps88+u/BLOPs+jnqgN5wbGhri/e9/f8Xjq1evjl/84hf7/bWhdOONN8aaNWviggsuiLa2tjjttNNix44d8etf/zruv//+6O7ujvHjx8eFF14YZ5xxRnz605+O7u7umDp1aqxatSq2b99ecc19H0mdN2/eAe+JdPzxx+/3/Zz29vZ47WtfO+y+V9SOKFCVK664In7/+9/HN77xjVi7dm3MmDEj1q9fX/GzBMccc0zceeed8YUvfCE+8pGPxO7du2PDhg0D+rr+K1VDQ0P85Cc/ic9//vNx3333xYoVK2LMmDFx0kknxcKFC2Ps2LERsfcH4tasWRPt7e1x7733RqlUive9732xePHiePOb3zzEXwWHmlK5mnf04BBWKpXinnvuyZ/MhsOJn2gGIIkCAEkUAEjeaIb/4W02DmdOCgAkUQAg9fvlo1rergCAgdefl0adFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIdUO9AV6Z3vKWtxSeWbVqVVVrNTU1VTVHdc4777zCM08++WThmT/96U+FZxh8TgoAJFEAIIkCAEkUAEiiAEASBQCSKACQ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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 11. Plot a confusion matrix comparing your model's predictions to the truth labels."
      ],
      "metadata": {
        "id": "qQwzqlBWxrpG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# See if torchmetrics exists, if not, install it\n",
        "try:\n",
        "    import torchmetrics, mlxtend\n",
        "    print(f\"mlxtend version: {mlxtend.__version__}\")\n",
        "    assert int(mlxtend.__version__.split(\".\")[1]) >= 19, \"mlxtend verison should be 0.19.0 or higher\"\n",
        "except:\n",
        "    !pip install -q torchmetrics -U mlxtend # <- Note: If you're using Google Colab, this may require restarting the runtime\n",
        "    import torchmetrics, mlxtend\n",
        "    print(f\"mlxtend version: {mlxtend.__version__}\")\n",
        "    # Import mlxtend upgraded version\n",
        "import mlxtend\n",
        "print(mlxtend.__version__)\n",
        "assert int(mlxtend.__version__.split(\".\")[1]) >= 19"
      ],
      "metadata": {
        "id": "vSrXiT_AbQ6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40248d65-99ff-43d7-af57-cabb3e8933bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m927.3/927.3 kB\u001b[0m \u001b[31m49.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m109.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m84.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m51.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m86.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hmlxtend version: 0.23.4\n",
            "0.23.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions across all test data\n",
        "from tqdm.auto import tqdm\n",
        "model_gpu.eval()\n",
        "y_preds = []\n",
        "with torch.inference_mode():\n",
        "  for batch, (X, y) in tqdm(enumerate(test_dataloader)):\n",
        "    # Make sure data on right device\n",
        "    X, y = X.to(device), y.to(device)\n",
        "    # Forward pass\n",
        "    y_pred_logits = model_gpu(X)\n",
        "    # Logits -> Pred probs -> Pred label\n",
        "    y_pred_labels = torch.argmax(torch.softmax(y_pred_logits, dim=1), dim=1)\n",
        "    # Append the labels to the preds list\n",
        "    y_preds.append(y_pred_labels)\n",
        "  y_preds=torch.cat(y_preds).cpu()\n",
        "len(y_preds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "a2963dd0080b449d8f7f90573c4da188",
            "9db0a911e60c4271b78101ea50573155",
            "cbdaec3285264cd2a71bab7d8a8216f9",
            "0d573b771475435fa51639e5bfb8cb28",
            "c08d9d15e6eb4e818aa97aa31c66ec95",
            "08da86e0e8404cd1b02654bd24c62732",
            "45397b429d5d47feab451defd8614c0d",
            "3beb124807bb4957940a8e9638f0fa5c",
            "c49009c851e94e55b2c1f3c4c901e205",
            "8ae0360136974b5ba1b7b607de3686c1",
            "2e9c4f7159c545efb4f667c1be12a5b0"
          ]
        },
        "id": "YmzNi-X_iaN7",
        "outputId": "73f9d0e9-0adb-40dd-a91a-2aded6723ef1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a2963dd0080b449d8f7f90573c4da188"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10000"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.targets[:10], y_preds[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQC7oh1tig9S",
        "outputId": "a80a26d7-182a-4fc3-a1ea-f9edb46e8337"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([7, 2, 1, 0, 4, 1, 4, 9, 5, 9]),\n",
              " tensor([7, 2, 1, 0, 4, 1, 4, 9, 5, 9]))"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchmetrics import ConfusionMatrix\n",
        "from mlxtend.plotting import plot_confusion_matrix\n",
        "\n",
        "# Setup confusion matrix\n",
        "confmat = ConfusionMatrix(task=\"multiclass\", num_classes=len(class_names))\n",
        "confmat_tensor = confmat(preds=y_preds,\n",
        "                         target=test_data.targets)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "fix, ax = plot_confusion_matrix(\n",
        "    conf_mat=confmat_tensor.numpy(),\n",
        "    class_names=class_names,\n",
        "    figsize=(10, 7)\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 638
        },
        "id": "czblDny_in5U",
        "outputId": "11864434-840c-4d49-d8c9-4c974f04fb55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 12. Create a random tensor of shape `[1, 3, 64, 64]` and pass it through a `nn.Conv2d()` layer with various hyperparameter settings (these can be any settings you choose), what do you notice if the `kernel_size` parameter goes up and down?"
      ],
      "metadata": {
        "id": "lj6bDhoWxt2y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "random_tensor = torch.rand([1, 3, 64, 64])\n",
        "random_tensor.shape\n",
        "conv_layer = nn.Conv2d(in_channels=3,\n",
        "                       out_channels=64,\n",
        "                       kernel_size=3,\n",
        "                       stride=2,\n",
        "                       padding=1)\n",
        "\n",
        "print(f\"Random tensor original shape: {random_tensor.shape}\")\n",
        "random_tensor_through_conv_layer = conv_layer(random_tensor)\n",
        "print(f\"Random tensor through conv layer shape: {random_tensor_through_conv_layer.shape}\")\n"
      ],
      "metadata": {
        "id": "leCTsqtSbR5P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18c91e86-d1d6-4db9-9f04-9b3c8146dd02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random tensor original shape: torch.Size([1, 3, 64, 64])\n",
            "Random tensor through conv layer shape: torch.Size([1, 64, 32, 32])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 13. Use a model similar to the trained `model_2` from notebook 03 to make predictions on the test [`torchvision.datasets.FashionMNIST`](https://pytorch.org/vision/main/generated/torchvision.datasets.FashionMNIST.html) dataset.\n",
        "* Then plot some predictions where the model was wrong alongside what the label of the image should've been.\n",
        "* After visualing these predictions do you think it's more of a modelling error or a data error?\n",
        "* As in, could the model do better or are the labels of the data too close to each other (e.g. a \"Shirt\" label is too close to \"T-shirt/top\")?"
      ],
      "metadata": {
        "id": "VHS20cNTxwSi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Download FashionMNIST train & test\n",
        "from torchvision import datasets\n",
        "from torchvision import transforms\n",
        "\n",
        "fashion_mnist_train = datasets.FashionMNIST(root=\".\",\n",
        "                                            download=True,\n",
        "                                            train=True,\n",
        "                                            transform=transforms.ToTensor())\n",
        "\n",
        "fashion_mnist_test = datasets.FashionMNIST(root=\".\",\n",
        "                                           train=False,\n",
        "                                           download=True,\n",
        "                                           transform=transforms.ToTensor())\n",
        "\n",
        "len(fashion_mnist_train), len(fashion_mnist_test)\n",
        "# Get the class names of the Fashion MNIST dataset\n",
        "fashion_mnist_class_names = fashion_mnist_train.classes\n",
        "fashion_mnist_class_names"
      ],
      "metadata": {
        "id": "78a8LjtdbSZj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3dae493e-8c24-4559-8ed8-ec6de4145e58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./FashionMNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 26.4M/26.4M [00:02<00:00, 9.29MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./FashionMNIST/raw/train-images-idx3-ubyte.gz to ./FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 29.5k/29.5k [00:00<00:00, 150kB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4.42M/4.42M [00:01<00:00, 2.79MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5.15k/5.15k [00:00<00:00, 11.5MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./FashionMNIST/raw\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['T-shirt/top',\n",
              " 'Trouser',\n",
              " 'Pullover',\n",
              " 'Dress',\n",
              " 'Coat',\n",
              " 'Sandal',\n",
              " 'Shirt',\n",
              " 'Sneaker',\n",
              " 'Bag',\n",
              " 'Ankle boot']"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Turn FashionMNIST datasets into dataloaders\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "fashion_mnist_train_dataloader = DataLoader(fashion_mnist_train,\n",
        "                                            batch_size=32,\n",
        "                                            shuffle=True)\n",
        "\n",
        "fashion_mnist_test_dataloader = DataLoader(fashion_mnist_test,\n",
        "                                           batch_size=32,\n",
        "                                           shuffle=False)\n",
        "\n",
        "len(fashion_mnist_train_dataloader), len(fashion_mnist_test_dataloader)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLoagbwVKEAL",
        "outputId": "c52b3925-b510-47f4-f339-e659dd02e465"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1875, 313)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model_2 is the same architecture as MNIST_model\n",
        "model_2 = MNIST_model(input_shape=1,\n",
        "                      hidden_units=10,\n",
        "                      output_shape=10).to(device)\n",
        "model_2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jDkmCa2tKLZy",
        "outputId": "fdaaa05e-de01-44bb-ffa0-b59d1a2ca089"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MNIST_model(\n",
              "  (conv_block_1): Sequential(\n",
              "    (0): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (conv_block_2): Sequential(\n",
              "    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (classifier): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): Linear(in_features=490, out_features=10, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup loss and optimizer\n",
        "from torch import nn\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(model_2.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "3k_32qrnKQnY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup metrics\n",
        "from tqdm.auto import tqdm\n",
        "from torchmetrics import Accuracy\n",
        "\n",
        "acc_fn = Accuracy(task = 'multiclass', num_classes=len(fashion_mnist_class_names)).to(device)\n",
        "\n",
        "# Setup training/testing loop\n",
        "epochs = 5\n",
        "for epoch in tqdm(range(epochs)):\n",
        "  train_loss, test_loss_total = 0, 0\n",
        "  train_acc, test_acc = 0, 0\n",
        "\n",
        "  ### Training\n",
        "  model_2.train()\n",
        "  for batch, (X_train, y_train) in enumerate(fashion_mnist_train_dataloader):\n",
        "    X_train, y_train = X_train.to(device), y_train.to(device)\n",
        "\n",
        "    # Forward pass and loss\n",
        "    y_pred = model_2(X_train)\n",
        "    loss = loss_fn(y_pred, y_train)\n",
        "    train_loss += loss\n",
        "    train_acc += acc_fn(y_pred, y_train)\n",
        "\n",
        "    # Backprop and gradient descent\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "  # Adjust the loss/acc (find the loss/acc per epoch)\n",
        "  train_loss /= len(fashion_mnist_train_dataloader)\n",
        "  train_acc /= len(fashion_mnist_train_dataloader)\n",
        "\n",
        "  ### Testing\n",
        "  model_2.eval()\n",
        "  with torch.inference_mode():\n",
        "    for batch, (X_test, y_test) in enumerate(fashion_mnist_test_dataloader):\n",
        "      X_test, y_test = X_test.to(device), y_test.to(device)\n",
        "\n",
        "      # Forward pass and loss\n",
        "      y_pred_test = model_2(X_test)\n",
        "      test_loss = loss_fn(y_pred_test, y_test)\n",
        "      test_loss_total += test_loss\n",
        "\n",
        "      test_acc += acc_fn(y_pred_test, y_test)\n",
        "\n",
        "    # Adjust the loss/acc (find the loss/acc per epoch)\n",
        "    test_loss /= len(fashion_mnist_test_dataloader)\n",
        "    test_acc /= len(fashion_mnist_test_dataloader)\n",
        "\n",
        "  # Print out what's happening\n",
        "  print(f\"Epoch: {epoch} | Train loss: {train_loss:.3f} | Train acc: {train_acc:.2f} | Test loss: {test_loss_total:.3f} | Test acc: {test_acc:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156,
          "referenced_widgets": [
            "d97f28b38c98433896ac99037182b3cd",
            "5171e7d0c89349d1942872a271d098d5",
            "73a16e5349d341b5af0b013731ced828",
            "7e44d7a46ba4402cb164b2433ffdd3bf",
            "1b5f5ad03c8b4abbbcd9e9ff4c28b149",
            "062c9c612da0434ba794c973c5857510",
            "04ac343c4b8e419fab2787d7972b4da1",
            "458a4274c8b74a289184eedd1180e26c",
            "2b92883149594d35a1b72a9bbdd3e41a",
            "9f9fb380066f4175aceea26385626884",
            "1940c92f2cd1436cb186071674146a15"
          ]
        },
        "id": "71Lk8G9-KXh2",
        "outputId": "a0d0ca1f-3dfa-4f1f-ad51-a163a34cda43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/5 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d97f28b38c98433896ac99037182b3cd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 | Train loss: 1.121 | Train acc: 0.59 | Test loss: 192.727 | Test acc: 0.78\n",
            "Epoch: 1 | Train loss: 0.512 | Train acc: 0.82 | Test loss: 153.563 | Test acc: 0.83\n",
            "Epoch: 2 | Train loss: 0.431 | Train acc: 0.85 | Test loss: 135.133 | Test acc: 0.85\n",
            "Epoch: 3 | Train loss: 0.391 | Train acc: 0.86 | Test loss: 123.546 | Test acc: 0.86\n",
            "Epoch: 4 | Train loss: 0.366 | Train acc: 0.87 | Test loss: 117.869 | Test acc: 0.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions with trained model_2\n",
        "test_preds = []\n",
        "model_2.eval()\n",
        "with torch.inference_mode():\n",
        "  for X_test, y_test in tqdm(fashion_mnist_test_dataloader):\n",
        "    y_logits = model_2(X_test.to(device))\n",
        "    y_pred_probs = torch.softmax(y_logits, dim=1)\n",
        "    y_pred_labels = torch.argmax(y_pred_probs, dim=1)\n",
        "    test_preds.append(y_pred_labels)\n",
        "test_preds = torch.cat(test_preds).cpu() # matplotlib likes CPU\n",
        "test_preds[:10], len(test_preds)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "4aa82d89f2074e89bb514adf1f407d60",
            "e8de50e36e644606b76bee73e655e11e",
            "2491b725d5cf46b9ad30ba1b46c2c7a8",
            "7063a77f761f4402a0dbd434f6475939",
            "6aa262b1d0284761918302feaf86796c",
            "0d98b13403cf47858fc9be646fcb151d",
            "c887d4b92fd14828ba47c71ee383932c",
            "104ae0dd35bb440283deb4a98686e985",
            "1280745dd25547799bd36c359e1ab41b",
            "eb1b53c81546478985715a780717505b",
            "5e1911efa81c48ed9c36093c74466df5"
          ]
        },
        "id": "vLZ_8gH7KnWG",
        "outputId": "e7bcbda3-e024-425e-8258-abc1d7f04c53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/313 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4aa82d89f2074e89bb514adf1f407d60"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([9, 2, 1, 1, 6, 1, 4, 6, 5, 7]), 10000)"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get wrong prediction indexes\n",
        "import numpy as np\n",
        "wrong_pred_indexes = np.where(test_preds != fashion_mnist_test.targets)[0]\n",
        "len(wrong_pred_indexes)\n",
        "\n",
        "# Select random 9 wrong predictions and plot them\n",
        "import random\n",
        "random_selection = random.sample(list(wrong_pred_indexes), k=9)\n",
        "\n",
        "plt.figure(figsize=(10, 10))\n",
        "for i, idx in enumerate(random_selection):\n",
        "  # Get true and pred labels\n",
        "  true_label = fashion_mnist_class_names[fashion_mnist_test[idx][1]]\n",
        "  pred_label = fashion_mnist_class_names[test_preds[idx]]\n",
        "\n",
        "  # Plot the wrong prediction with its original label\n",
        "  plt.subplot(3, 3, i+1)\n",
        "  plt.imshow(fashion_mnist_test[idx][0].squeeze(), cmap=\"gray\")\n",
        "  plt.title(f\"True: {true_label} | Pred: {pred_label}\", c=\"r\")\n",
        "  plt.axis(False);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 655
        },
        "id": "6OOkorWvKxt1",
        "outputId": "f4630608-dbcd-4a5b-845f-720dcdc6abe6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}